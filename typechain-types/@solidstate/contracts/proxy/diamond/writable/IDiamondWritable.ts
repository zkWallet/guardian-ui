/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export declare namespace IDiamondWritable {
  export type FacetCutStruct = {
    target: PromiseOrValue<string>;
    action: PromiseOrValue<BigNumberish>;
    selectors: PromiseOrValue<BytesLike>[];
  };

  export type FacetCutStructOutput = [string, number, string[]] & {
    target: string;
    action: number;
    selectors: string[];
  };
}

export interface IDiamondWritableInterface extends utils.Interface {
  functions: {
    "diamondCut((address,uint8,bytes4[])[],address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "diamondCut"
      | "diamondCut((address,uint8,bytes4[])[],address,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "diamondCut",
    values: [
      IDiamondWritable.FacetCutStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    values: [
      IDiamondWritable.FacetCutStruct[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "diamondCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "diamondCut((address,uint8,bytes4[])[],address,bytes)",
    data: BytesLike
  ): Result;

  events: {
    "DiamondCut(tuple[],address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondCut"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "DiamondCut(tuple[],address,bytes)"
  ): EventFragment;
}

export interface DiamondCutEventObject {
  facetCuts: IDiamondWritable.FacetCutStructOutput[];
  target: string;
  data: string;
}
export type DiamondCutEvent = TypedEvent<
  [IDiamondWritable.FacetCutStructOutput[], string, string],
  DiamondCutEventObject
>;

export type DiamondCutEventFilter = TypedEventFilter<DiamondCutEvent>;

export interface IDiamondWritable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDiamondWritableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    diamondCut(
      facetCuts: IDiamondWritable.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      facetCuts: IDiamondWritable.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  diamondCut(
    facetCuts: IDiamondWritable.FacetCutStruct[],
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
    facetCuts: IDiamondWritable.FacetCutStruct[],
    target: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    diamondCut(
      facetCuts: IDiamondWritable.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      facetCuts: IDiamondWritable.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DiamondCut(tuple[],address,bytes)"(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;
    DiamondCut(
      facetCuts?: null,
      target?: null,
      data?: null
    ): DiamondCutEventFilter;
  };

  estimateGas: {
    diamondCut(
      facetCuts: IDiamondWritable.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      facetCuts: IDiamondWritable.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    diamondCut(
      facetCuts: IDiamondWritable.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "diamondCut((address,uint8,bytes4[])[],address,bytes)"(
      facetCuts: IDiamondWritable.FacetCutStruct[],
      target: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
