/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface RecoveryInternalInterface extends utils.Interface {
  functions: {};

  events: {
    "Recovered(address)": EventFragment;
    "RecoveryUpdated(uint8,uint256,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RecoveryUpdated(uint8,uint256,address,uint8)"
  ): EventFragment;
}

export interface RecoveredEventObject {
  newOwner: string;
}
export type RecoveredEvent = TypedEvent<[string], RecoveredEventObject>;

export type RecoveredEventFilter = TypedEventFilter<RecoveredEvent>;

export interface RecoveryUpdatedEventObject {
  status: number;
  majority: BigNumber;
  nominee: string;
  counter: number;
}
export type RecoveryUpdatedEvent = TypedEvent<
  [number, BigNumber, string, number],
  RecoveryUpdatedEventObject
>;

export type RecoveryUpdatedEventFilter = TypedEventFilter<RecoveryUpdatedEvent>;

export interface RecoveryInternal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RecoveryInternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Recovered(address)"(newOwner?: null): RecoveredEventFilter;
    Recovered(newOwner?: null): RecoveredEventFilter;

    "RecoveryUpdated(uint8,uint256,address,uint8)"(
      status?: null,
      majority?: null,
      nominee?: null,
      counter?: null
    ): RecoveryUpdatedEventFilter;
    RecoveryUpdated(
      status?: null,
      majority?: null,
      nominee?: null,
      counter?: null
    ): RecoveryUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
