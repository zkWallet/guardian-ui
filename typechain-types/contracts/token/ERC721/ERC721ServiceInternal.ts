/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ERC721ServiceInternalInterface extends utils.Interface {
  functions: {};

  events: {
    "ERC721TokenRemoved(address)": EventFragment;
    "ERC721TokenTracked(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ERC721TokenRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ERC721TokenRemoved(address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ERC721TokenTracked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ERC721TokenTracked(address)"
  ): EventFragment;
}

export interface ERC721TokenRemovedEventObject {
  tokenAddress: string;
}
export type ERC721TokenRemovedEvent = TypedEvent<
  [string],
  ERC721TokenRemovedEventObject
>;

export type ERC721TokenRemovedEventFilter =
  TypedEventFilter<ERC721TokenRemovedEvent>;

export interface ERC721TokenTrackedEventObject {
  tokenAddress: string;
}
export type ERC721TokenTrackedEvent = TypedEvent<
  [string],
  ERC721TokenTrackedEventObject
>;

export type ERC721TokenTrackedEventFilter =
  TypedEventFilter<ERC721TokenTrackedEvent>;

export interface ERC721ServiceInternal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC721ServiceInternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ERC721TokenRemoved(address)"(
      tokenAddress?: PromiseOrValue<string> | null
    ): ERC721TokenRemovedEventFilter;
    ERC721TokenRemoved(
      tokenAddress?: PromiseOrValue<string> | null
    ): ERC721TokenRemovedEventFilter;

    "ERC721TokenTracked(address)"(
      tokenAddress?: PromiseOrValue<string> | null
    ): ERC721TokenTrackedEventFilter;
    ERC721TokenTracked(
      tokenAddress?: PromiseOrValue<string> | null
    ): ERC721TokenTrackedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
