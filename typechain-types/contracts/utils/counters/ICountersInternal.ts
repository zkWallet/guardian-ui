/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ICountersInternalInterface extends utils.Interface {
  functions: {};

  events: {
    "Decremented(uint256,uint256)": EventFragment;
    "Incremented(uint256,uint256)": EventFragment;
    "Reset(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Decremented"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Decremented(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Incremented"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Incremented(uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reset(uint256,uint256)"): EventFragment;
}

export interface DecrementedEventObject {
  index: BigNumber;
  newValue: BigNumber;
}
export type DecrementedEvent = TypedEvent<
  [BigNumber, BigNumber],
  DecrementedEventObject
>;

export type DecrementedEventFilter = TypedEventFilter<DecrementedEvent>;

export interface IncrementedEventObject {
  index: BigNumber;
  newValue: BigNumber;
}
export type IncrementedEvent = TypedEvent<
  [BigNumber, BigNumber],
  IncrementedEventObject
>;

export type IncrementedEventFilter = TypedEventFilter<IncrementedEvent>;

export interface ResetEventObject {
  index: BigNumber;
  newValue: BigNumber;
}
export type ResetEvent = TypedEvent<[BigNumber, BigNumber], ResetEventObject>;

export type ResetEventFilter = TypedEventFilter<ResetEvent>;

export interface ICountersInternal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICountersInternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Decremented(uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      newValue?: null
    ): DecrementedEventFilter;
    Decremented(
      index?: PromiseOrValue<BigNumberish> | null,
      newValue?: null
    ): DecrementedEventFilter;

    "Incremented(uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      newValue?: null
    ): IncrementedEventFilter;
    Incremented(
      index?: PromiseOrValue<BigNumberish> | null,
      newValue?: null
    ): IncrementedEventFilter;

    "Reset(uint256,uint256)"(
      index?: PromiseOrValue<BigNumberish> | null,
      newValue?: null
    ): ResetEventFilter;
    Reset(
      index?: PromiseOrValue<BigNumberish> | null,
      newValue?: null
    ): ResetEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
