/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IWalletFactoryInternalInterface extends utils.Interface {
  functions: {};

  events: {
    "DiamondIsSet(address)": EventFragment;
    "FacetIsAdded(string,address,string)": EventFragment;
    "FacetIsRemoved(address)": EventFragment;
    "GuardianAdded(bytes32,bytes32)": EventFragment;
    "GuardianRemoved(bytes32,bytes32)": EventFragment;
    "NewDiamondWallet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DiamondIsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DiamondIsSet(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FacetIsAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "FacetIsAdded(string,address,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FacetIsRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FacetIsRemoved(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianAdded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GuardianAdded(bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GuardianRemoved(bytes32,bytes32)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDiamondWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewDiamondWallet(address)"): EventFragment;
}

export interface DiamondIsSetEventObject {
  wallet: string;
}
export type DiamondIsSetEvent = TypedEvent<[string], DiamondIsSetEventObject>;

export type DiamondIsSetEventFilter = TypedEventFilter<DiamondIsSetEvent>;

export interface FacetIsAddedEventObject {
  name: string;
  facetAddress: string;
  version: string;
}
export type FacetIsAddedEvent = TypedEvent<
  [string, string, string],
  FacetIsAddedEventObject
>;

export type FacetIsAddedEventFilter = TypedEventFilter<FacetIsAddedEvent>;

export interface FacetIsRemovedEventObject {
  facetAddress: string;
}
export type FacetIsRemovedEvent = TypedEvent<
  [string],
  FacetIsRemovedEventObject
>;

export type FacetIsRemovedEventFilter = TypedEventFilter<FacetIsRemovedEvent>;

export interface GuardianAddedEventObject {
  hashId: string;
  guardian: string;
}
export type GuardianAddedEvent = TypedEvent<
  [string, string],
  GuardianAddedEventObject
>;

export type GuardianAddedEventFilter = TypedEventFilter<GuardianAddedEvent>;

export interface GuardianRemovedEventObject {
  hashId: string;
  guardian: string;
}
export type GuardianRemovedEvent = TypedEvent<
  [string, string],
  GuardianRemovedEventObject
>;

export type GuardianRemovedEventFilter = TypedEventFilter<GuardianRemovedEvent>;

export interface NewDiamondWalletEventObject {
  instance: string;
}
export type NewDiamondWalletEvent = TypedEvent<
  [string],
  NewDiamondWalletEventObject
>;

export type NewDiamondWalletEventFilter =
  TypedEventFilter<NewDiamondWalletEvent>;

export interface IWalletFactoryInternal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWalletFactoryInternalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "DiamondIsSet(address)"(wallet?: null): DiamondIsSetEventFilter;
    DiamondIsSet(wallet?: null): DiamondIsSetEventFilter;

    "FacetIsAdded(string,address,string)"(
      name?: null,
      facetAddress?: null,
      version?: null
    ): FacetIsAddedEventFilter;
    FacetIsAdded(
      name?: null,
      facetAddress?: null,
      version?: null
    ): FacetIsAddedEventFilter;

    "FacetIsRemoved(address)"(facetAddress?: null): FacetIsRemovedEventFilter;
    FacetIsRemoved(facetAddress?: null): FacetIsRemovedEventFilter;

    "GuardianAdded(bytes32,bytes32)"(
      hashId?: PromiseOrValue<BytesLike> | null,
      guardian?: null
    ): GuardianAddedEventFilter;
    GuardianAdded(
      hashId?: PromiseOrValue<BytesLike> | null,
      guardian?: null
    ): GuardianAddedEventFilter;

    "GuardianRemoved(bytes32,bytes32)"(
      hashId?: PromiseOrValue<BytesLike> | null,
      guardian?: null
    ): GuardianRemovedEventFilter;
    GuardianRemoved(
      hashId?: PromiseOrValue<BytesLike> | null,
      guardian?: null
    ): GuardianRemovedEventFilter;

    "NewDiamondWallet(address)"(instance?: null): NewDiamondWalletEventFilter;
    NewDiamondWallet(instance?: null): NewDiamondWalletEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
